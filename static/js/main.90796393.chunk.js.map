{"version":3,"sources":["click1.wav","click2.wav","component/clef.svg","component/Visual.js","component/Metronome.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Visual","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","a","animationDuration","swing","react_default","createElement","src","ticker","className","toggleStart","alt","style","Component","Metronome","handleBpmChange","event","bpm","target","value","setState","handleBeatsPerMeasureChange","beatsPerMeasure","console","log","startStop","playing","clearInterval","timer","toggleClass","setInterval","playClick","count","_this$state","click2","play","click1","Audio","_this$state2","component_Visual","type","min","max","onChange","onClick","id","name","defaultChecked","App","src_component_Metronome","href","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0SC2BzBC,cArBX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,EAAG,CAACC,kBAAmBV,EAAMW,QAHnBV,wEAQd,OACIW,EAAAH,EAAAI,cAAA,WACID,EAAAH,EAAAI,cAAA,OAAQC,IAAKC,IACLC,UAAWZ,KAAKJ,MAAMiB,YACtBC,IAAI,SAEJC,MAAO,CAACT,kBAAmBN,KAAKJ,MAAMW,iBAfzCS,aC4GNC,cArGX,SAAAA,EAAYrB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACdpB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAd,KAAAH,KAAMJ,KAeVsB,gBAAkB,SAAAC,GACd,IAAMC,GAAOD,EAAME,OAAOC,MAC1BzB,EAAK0B,SAAS,CAAEH,MAAKb,MAAQ,IAAIY,EAAME,OAAOC,MAAS,OAlBzCzB,EAqBlB2B,4BAA8B,SAAAL,GAC1B,IAAMM,GAAmBN,EAAME,OAAOC,MACtCI,QAAQC,IAAIF,GACZ5B,EAAK0B,SAAS,CAACE,qBAxBD5B,EA2BlB+B,UAAY,WACL/B,EAAKO,MAAMyB,SACVC,cAAcjC,EAAKkC,OACnBL,QAAQC,IAAI,uBAEZ9B,EAAK0B,SAAS,CACVM,SAAS,EACTG,YAAa,SACbnB,YAAc,aAGlBhB,EAAKkC,MAAQE,YACTpC,EAAKqC,UACJ,GAAKrC,EAAKO,MAAMgB,IAAO,KAE5BvB,EAAK0B,SAAS,CACVY,MAAM,EACNN,SAAS,EACTG,YAAa,yBACbnB,YAAc,SAElBhB,EAAKqC,aAhDKrC,EAqDlBqC,UAAY,WAAK,IAAAE,EACsBvC,EAAKO,MAD3BgC,EACLD,MADKC,EACEX,kBAEgB,EAC3B5B,EAAKwC,OAAOC,OAGZzC,EAAK0C,OAAOD,OAEhBzC,EAAK0B,SAAS,SAAAnB,GAAK,MAAK,CACpB+B,OAAQ/B,EAAM+B,MAAQ,GAAK/B,EAAMqB,oBA5DrC5B,EAAKO,MAAQ,CACTyB,SAAS,EACTM,MAAO,EACPf,IAAK,IACLK,gBAAiB,EACjBO,YAAc,SACdnB,YAAc,SACdN,MAAO,MAEXV,EAAK0C,OAAS,IAAIC,MAAMD,KACxB1C,EAAKwC,OAAS,IAAIG,MAAMH,KAbVxC,wEAmET,IAAA4C,EACqDzC,KAAKI,MAAvDyB,EADHY,EACGZ,QAAST,EADZqB,EACYrB,IAAKY,EADjBS,EACiBT,YAAanB,EAD9B4B,EAC8B5B,YAAaN,EAD3CkC,EAC2ClC,MAEhD,OAAOC,EAAAH,EAAAI,cAAA,OAAKG,UAAU,aACtBJ,EAAAH,EAAAI,cAAA,WACID,EAAAH,EAAAI,cAACiC,EAAD,CAAQtB,IAAKA,EACLS,QAASA,EACTG,YAAaA,EACbnB,YAAaA,EACbN,MAAOA,IACfC,EAAAH,EAAAI,cAAA,sBACAD,EAAAH,EAAAI,cAAA,OAAKG,UAAU,cACXJ,EAAAH,EAAAI,cAAA,WAAMW,EAAN,QACIZ,EAAAH,EAAAI,cAAA,SACAkC,KAAK,QACLC,IAAI,KACJC,IAAI,MACJvB,MAAOF,EACP0B,SAAU9C,KAAKkB,gBACfX,MAAOA,KAEXC,EAAAH,EAAAI,cAAA,UAAQG,UAAWoB,EAAae,QAAS/C,KAAK4B,WAAYC,EAAU,OAAS,SAC7ErB,EAAAH,EAAAI,cAAA,OAAKuC,GAAG,YAAYF,SAAU9C,KAAKwB,6BAC/BhB,EAAAH,EAAAI,cAAA,+BACAD,EAAAH,EAAAI,cAAA,aAAOD,EAAAH,EAAAI,cAAA,SAAOkC,KAAK,QAAQrB,MAAM,IAAI2B,KAAK,YAAYC,gBAAc,IAApE,OACA1C,EAAAH,EAAAI,cAAA,aAAOD,EAAAH,EAAAI,cAAA,SAAOkC,KAAK,QAAQrB,MAAM,IAAI2B,KAAK,cAA1C,OACAzC,EAAAH,EAAAI,cAAA,aAAOD,EAAAH,EAAAI,cAAA,SAAOkC,KAAK,QAAQrB,MAAM,IAAI2B,KAAK,cAA1C,OAAkEzC,EAAAH,EAAAI,cAAA,WAClED,EAAAH,EAAAI,cAAA,aAAOD,EAAAH,EAAAI,cAAA,SAAOkC,KAAK,QAAQrB,MAAM,IAAI2B,KAAK,cAA1C,mCAhGIjC,aCmCTmC,mLAvCX,OACE3C,EAAAH,EAAAI,cAAA,OAAKG,UAAU,OACbJ,EAAAH,EAAAI,cAAA,UAAQG,UAAU,cAClBJ,EAAAH,EAAAI,cAAA,WACED,EAAAH,EAAAI,cAAC2C,EAAD,OAEF5C,EAAAH,EAAAI,cAAA,8BAEED,EAAAH,EAAAI,cAAA,KACEG,UAAU,WACVyC,KAAK,yCACLhC,OAAO,SACPiC,IAAI,uBAJN,UAFF,mBAUE9C,EAAAH,EAAAI,cAAA,KACEG,UAAU,WACVyC,KAAK,2CACLhC,OAAO,SACPiC,IAAI,uBAJN,WAVF,mBAkBE9C,EAAAH,EAAAI,cAAA,KACEG,UAAU,WACVyC,KAAK,0BACLhC,OAAO,SACPiC,IAAI,uBAJN,wBA1BQtC,aCQZuC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlE,QACf4D,UAAUC,cAAcQ,YAI1B/C,QAAQC,IACN,gHAKEoC,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlB1C,QAAQC,IAAI,sCAGRoC,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,UAO5BQ,MAAM,SAAAC,GACLnD,QAAQmD,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOvE,EAAAH,EAAAI,cAACuE,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB3B,OAAOC,SAASL,MACpDgC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAyB,OAAMH,GAAN,sBAEP7B,GAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,GACHK,KAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BV,OAAOC,SAASuC,aAKpBpC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACLlD,QAAQC,IACN,mEArFAuE,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,KAAK,WACjCzC,QAAQC,IACN,+GAMJkC,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.90796393.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","module.exports = __webpack_public_path__ + \"static/media/clef.96f6e8ca.svg\";","import React, { Component } from 'react';\nimport './Metronome.css';\nimport ticker from './clef.svg';\nimport './animate.css';\n\nclass Visual extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            a: {animationDuration: props.swing},\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <img    src={ticker} \n                        className={this.props.toggleStart} \n                        alt=\"ticker\" \n                        // style={{animationDuration: '6s'}}//works as string\n                        style={{animationDuration: this.props.swing}}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Visual;","import React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from '../click1.wav';\nimport click2 from '../click2.wav';\nimport './animate.css';\nimport Visual from './Visual';\n\n//Screen flash - light mode - dark mode - off\n//visual off - audio off - both on\n\nclass Metronome extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            playing: false,\n            count: 0,\n            bpm: 120,\n            beatsPerMeasure: 4,\n            toggleClass : 'button',\n            toggleStart : 'wobble',\n            swing: '1s'\n        }\n        this.click1 = new Audio(click1);\n        this.click2 = new Audio(click2);\n    }\n\n    handleBpmChange = event => {\n        const bpm = +event.target.value;//funny this was working fine without type coercion\n        this.setState({ bpm, swing: (120/event.target.value) + 's' });\n    }\n\n    handleBeatsPerMeasureChange = event =>{\n        const beatsPerMeasure = +event.target.value;\n        console.log(beatsPerMeasure);\n        this.setState({beatsPerMeasure})\n    }\n\n    startStop = () =>{\n        if(this.state.playing){\n            clearInterval(this.timer);\n            console.log('playing from parent');\n\n            this.setState({\n                playing: false,\n                toggleClass: 'button',\n                toggleStart : 'wobble'\n            });\n        } else {\n            this.timer = setInterval(\n                this.playClick, \n                (60 / this.state.bpm) * 1000\n            );\n            this.setState({\n                count:0,\n                playing: true,\n                toggleClass: 'button, button-pressed',\n                toggleStart : 'swing'\n            },\n            this.playClick\n            );\n        }\n    }\n\n    playClick = () =>{\n        const { count, beatsPerMeasure } = this.state;\n\n        if(count % beatsPerMeasure === 0){\n            this.click2.play();\n\n        } else {\n            this.click1.play();\n        }\n        this.setState(state => ({\n            count: (state.count + 1) % state.beatsPerMeasure,\n        }))\n    }\n\n    render() {\n        const { playing, bpm, toggleClass, toggleStart, swing } = this.state;\n\n        return <div className=\"metronome\">\n        <div >\n            <Visual bpm={bpm} \n                    playing={playing} \n                    toggleClass={toggleClass} \n                    toggleStart={toggleStart} \n                    swing={swing}/>\n            <p>set tempo</p>\n            <div className=\"bpm-slider\">\n                <div>{bpm} BPM</div>\n                    <input \n                    type=\"range\" \n                    min=\"60\" \n                    max=\"180\" \n                    value={bpm}\n                    onChange={this.handleBpmChange} \n                    swing={swing}/>\n                </div>\n                <button className={toggleClass} onClick={this.startStop}>{playing ? 'Stop' : 'Start'}</button>\n                <div id=\"signature\" onChange={this.handleBeatsPerMeasureChange}>\n                    <p>set time signature</p>\n                    <label><input type=\"radio\" value=\"4\" name=\"signature\" defaultChecked/>4/4</label>\n                    <label><input type=\"radio\" value=\"2\" name=\"signature\"/>2/4</label>\n                    <label><input type=\"radio\" value=\"3\" name=\"signature\"/>3/4</label><br />\n                    <label><input type=\"radio\" value=\"6\" name=\"signature\"/>Ed Sheeran Mode (6/8)</label>\n                </div>\n            </div>\n        </div>;\n    }\n}\n\nexport default Metronome;","import React, { Component } from 'react';\nimport './App.css';\nimport Metronome from './component/Metronome';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <div>\n          <Metronome />\n        </div>\n        <p>\n          Listen on &nbsp;&nbsp;\n          <a\n            className=\"App-link\"\n            href=\"https://www.apple.com/uk/itunes/music/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            iTunes\n          </a>&nbsp;&nbsp;&nbsp;&nbsp;\n          <a\n            className=\"App-link\"\n            href=\"https://open.spotify.com/browse/featured\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Spotify\n          </a>&nbsp;&nbsp;&nbsp;&nbsp;\n          <a\n            className=\"App-link\"\n            href=\"https://soundcloud.com/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            SoundCloud\n          </a></p>\n        </header>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';//NEW??\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n//Dave has different but register here takes one arg\n"],"sourceRoot":""}